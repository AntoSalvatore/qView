parameters:
- name: arch
  type: string
  default: 'win64_msvc2017_64'
- name: buildPlugins
  type: string
  default: false


steps:
  # APNG

- bash: |
    git clone https://github.com/Skycoder42/QtApng
    cd QtApng
    git checkout $(git tag | tail -1)
  displayName: Clone APNG plugin
  condition: eq(${{ parameters.buildPlugins }}, true)
  
- bash: |
    cd QtApng
    qmake "CONFIG += libpng_static"
    make
    sudo make install
  condition: and(eq(${{ parameters.buildPlugins }}, true), ne( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Build APNG plugin (Unix)

- script: |
    cd QtApng
    set "arch=${{ parameters.arch }}"
    call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%arch:~3,2%.bat"
    qmake "CONFIG += libpng_static"
    nmake
  condition: and(eq(${{ parameters.buildPlugins }}, true), eq( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Build APNG plugin (Windows)

  # HEIF
  # Skip HEIF on mac because Qt supports HEIF on mac for some reason
- bash: |
    git clone https://github.com/strukturag/libde265
    cd libde265
    git checkout $(git tag | tail -1)

    git clone https://github.com/strukturag/libheif
    cd libheif
    git checkout $(git tag | tail -1)

    git clone https://github.com/jurplel/qt-heif-image-plugin.git
    cd qt-heif-image-plugin
    git checkout patch-1
  condition: and(eq(${{ parameters.buildPlugins }}, true), ne( variables['Agent.OS'], 'Darwin' ))
  displayName: Clone HEIF plugin
  
- bash: |
    cd libde265
    ./autogen.sh
    ./configure --disable-sherlock265
    make
    sudo make install

    cd libheif
    ./autogen.sh
    ./configure
    make
    sudo make install
    
    cd qt-heif-image-plugin
    cmake .
    make
    sudo make install
  condition: and(eq(${{ parameters.buildPlugins }}, true), eq( variables['Agent.OS'], 'Linux' ))
  displayName: Build HEIF plugin (Linux)

- script: |
    set "arch=${{ parameters.arch }}"
    call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%arch:~3,2%.bat"
    
    cd libde265
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release
    ninja
    
    cd libheif
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLIBDE265_LIBRARY="../libde265/libde265.lib" -DLIBDE265_INCLUDE_DIR="../" -DCMAKE_INSTALL_PREFIX="C:/libheif" .
    ninja
    ninja install
    
    choco install pkgconfiglite --allow-empty-checksums
    set PKG_CONFIG_PATH=C:\libheif\lib\pkgconfig
    
    cd qt-heif-image-plugin
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release .
    ninja
  condition: and(eq(${{ parameters.buildPlugins }}, true), eq( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Build HEIF plugin (Windows)

  # AVIF

- bash: |
    git clone https://github.com/novomesk/qt-avif-image-plugin
    cd qt-avif-image-plugin
    git checkout v0.3.2
  displayName: Clone AVIF plugin
  condition: eq(${{ parameters.buildPlugins }}, true)

- bash: |
    cd qt-avif-image-plugin
    ./build_libqavif_static.sh
    make
    sudo make install
  condition: and(eq(${{ parameters.buildPlugins }}, true), ne( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Build AVIF plugin (Unix)

- script: |
    set "arch=${{ parameters.arch }}"
    call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars%arch:~3,2%.bat"
    choco install yasm
    
    cd qt-avif-image-plugin/ext/libavif/ext/aom
    mkdir build.libavif
    cd build.libavif
    if %arch:~3,2%==32 (set "mightBeWin32=-A Win32")
    cmake %mightBeWin32% -DENABLE_DOCS=0 -DENABLE_EXAMPLES=0 -DENABLE_TESTDATA=0 -DENABLE_TESTS=0 -DENABLE_TOOLS=0 -DCONFIG_PIC=1 ..
    msbuild ALL_BUILD.vcxproj /p:Configuration=Release /m
    copy Release\aom.lib aom.lib
    copy aom.lib libaom.a
    
    cd ..\..\..\
    mkdir build
    cd build
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DAVIF_CODEC_AOM=ON -DAVIF_LOCAL_AOM=ON ..
    ninja
    copy avif.lib libavif.a
    
    cd ..\..\..\
    qmake qt-avif-image-plugin_local-libavif.pro
    nmake
  condition: and(eq(${{ parameters.buildPlugins }}, true), eq( variables['Agent.OS'], 'Windows_NT' ))
  displayName: Build AVIF plugin (Windows)


  # gtk2 and qt5ct style plugins for linux appimages
- bash: |
    git clone https://code.qt.io/qt/qtstyleplugins.git
    cd qtstyleplugins
    qmake
    sudo make installt

    wget 'https://sourceforge.net/projects/qt5ct/files/latest/download'
    tar xf download
    cd qt5ct*
    qmake
    sudo make install
  condition: and(eq(${{ parameters.buildPlugins }}, true), eq( variables['Agent.OS'], 'Linux' ))
  displayName: Get extra styles (Linux)
